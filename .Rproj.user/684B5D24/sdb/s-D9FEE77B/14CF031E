{
    "collab_server" : "",
    "contents" : "#-----------------------------------------------------------------------------------#\n# Haggard et al. \"High -throughput H295R steroidogenesis assay: utility as an\n# alternative and a statistical approach to characterize effects on steroidogenesis\"\n\n# Code to run 4-parameter Hill models on mean Mahalanobis Distance values to calculate the BMD (conce where\n# mMd goes above the critical limit).\n\n# Figure 9.\n\nrm(list = ls())\n\nlibrary(parallel)\nlibrary(ggplot2)\nlibrary(RColorBrewer)\nlibrary(reshape2)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(stringr)\nlibrary(data.table)\nlibrary(ggthemes)\nlibrary(dplyr)\nlibrary(cowplot)\n\n\nsetwd(\"./Mahalanobis Distance\")\n\n#-------------------------------------------------------------------------------------------------#\n#-----Functions used\n#-------------------------------------------------------------------------------------------------#\n\nlogistic4par  <- function(lx, T, cc, d) {\n    (1 + (cc - 1) / (1 + exp(-d * lx + T)))\n}\n\nBMD <- function(Z, T, cc, d) {\n    lD <- (log((cc - 1) / (Z - 1) - 1) - T) / (- d)\n    if (Z > cc | d < 0.01) Inf else if (is.finite(lD)) exp(lD) else lD\n}\n\ndofit <- function(Dsnm) {\n    of <- function(parms) {\n        T <- parms[1]\n        cc <- exp(parms[2])\n        d <- exp(parms[3])\n        sum((DS[[Dsnm]]$y - logistic4par(DS[[Dsnm]]$lx, T, cc, d))^2)\n    }\n    Spcor <- cor(DS[[Dsnm]]$y, DS[[Dsnm]]$lx, method=\"spearman\")\n    Spcortest <- cor.test(DS[[Dsnm]]$y, DS[[Dsnm]]$lx, method=\"spearman\")$p.value\n    out <- optim(c(0, 1, 0), of, control=list(maxit=2000))\n    Parms <- c(T = out$par[1], cc = exp(out$par[2]), d = exp(out$par[3]))\n    list(Parms=Parms, BMD=unname(BMD(DS[[Dsnm]]$Scrit01, Parms[1], Parms[2], Parms[3])),\n         MaxmMd = DS[[Dsnm]]$MaxmMd, Scrit = DS[[Dsnm]]$Scrit01,\n         cor=Spcor, cor_pvalue=Spcortest, \n         convergence = out$convergence, Name = Dsnm)\n}\n\ndoplots <- function(zz) {\n    pdta1 <- data.frame(Concentration = exp(DS[[zz[[\"Name\"]]]]$lx),\n                        mMd = DS[[zz[[\"Name\"]]]]$y)\n    xmin <- if(is.finite(zz$BMD) & zz$BMD > 0) min(c(DS[[zz[[\"Name\"]]]]$lx, log(zz$BMD))) else min(DS[[zz[[\"Name\"]]]]$lx)\n    pdta2 <- data.frame(x = exp(z <- seq(xmin,\n                                         max(DS[[zz[[\"Name\"]]]]$lx), length=300)),\n                        y = logistic4par(z, zz$Parms[\"T\"], zz$Parms[\"cc\"], zz$Parms[\"d\"]))\n    p <- ggplot() +\n        geom_point(data=pdta1, aes(x = Concentration, y=mMd)) +\n        geom_line(data=pdta2, aes(x=x, y=y)) +\n        annotate(geom=\"segment\", x=min(pdta2$x), xend=zz$BMD, y=zz$Scrit, yend=zz$Scrit,\n                 lty=2, color=brewer.pal(5, \"YlGnBu\")[3]) +\n        annotate(geom=\"segment\", x=zz$BMD, xend=zz$BMD, y=zz$Scrit, yend=0,\n                 color=brewer.pal(5, \"YlGnBu\")[3]) +\n        scale_x_log10() +\n        ggtitle(zz[[\"Name\"]])\n    p\n}\n\n\n\n#-------------------------------------------------------------------------------------------------#\n#-----Load output from mahalanobis_distance_calculation_and_Supp9.R \n#-------------------------------------------------------------------------------------------------#\n\nload(\"./RData/AllResps_outliersRemoved2017-08-09.rdata\")\n\n## split out data \n\nChemNames <- unique(Mahalanobis_dat$date_chnm_plate)\n\nDS <- lapply(ChemNames, function(nm) {\n    ds <- Dists[Dists$CA == nm,]\n    list(lx = log(ds$Conc),\n         y = ds$D11P,\n         Scrit01 = Mahalanobis_dat[Mahalanobis_dat$date_chnm_plate == nm,\"Scrit01\"],\n         MaxmMd = Mahalanobis_dat[Mahalanobis_dat$date_chnm_plate == nm,\"maxD11P\"]\n         )\n    })\nnames(DS) <- ChemNames\n\n## Delete the objects we don't need (to reduce the amount of stuff copied over to the child\n## processes\nrm(CritLim, dat, dat_mean, Dists, Mahalanobis_dat, Residuals, Resps)\ngc()\n\n## -----------------------------------------------------------------\n## Do the fits and construct plots\n\nout <- mclapply(ChemNames, function(nm) {\n    zz <- try(dofit(nm))\n    p <- if (!is(zz, \"try-error\")) {\n        doplots(zz)\n    } else NA\n        \n    list(Name = nm,\n         Fit = zz,\n         Plot = p)\n}, mc.cores=35)\n\nFits <- do.call(rbind,\n                lapply(out,\n                       function(x) {\n                           cbind(data.frame(Name=x$Name,\n                                            as.data.frame(matrix(c(x$Fit$Parms,BMD=x$Fit$BMD,\n                                                                   MaxmMd=x$Fit$MaxmMd,\n                                                                   Scrit=x$Fit$Scrit,\n                                                                   cor=x$Fit$cor,\n                                                                   cor_pvalue=x$Fit$cor_pvalue,\n                                                                   convergence=x$Fit$convergence),\n                                                                 nrow=1,\n                                                                 dimnames=list(NULL, c(names(x$Fit$Parms),\n                                                                                       \"BMD\",\"MaxmMd\",\"Scrit\",\"cor\",\"cor_pvalue\",\n                                                                                       \"convergence\"))))))}))\n\nsave(Fits, file=\"./RData/mMdFits.RData\")\n\nsum(sapply(out, function(x) x$Fit$convergence != 0))\n\nx <- sapply(out, function(x) x$Fit$MaxmMd)\ny <- sapply(out, function(x) x$Fit$BMD)\ny <- ifelse((yy <- ifelse(y <= 100, y, 1000)) < 1e-2, 1e-3,yy)\npdta <- data.frame(MaxmMd = x, BMD=y)\n\np <- ggplot(data=pdta, aes(x=MaxmMd, y=BMD)) +\n    geom_point() + geom_smooth() +\n    scale_y_log10(\"BMD\") +\n    scale_x_log10(\"MaxmMd\")\n\n\npdf(\"MaxmMd_plots.pdf\")\nprint(p)\n\nindx <- which(y == 1e-3)\nfor (i in 1:length(indx)) print(out[[indx[i]]]$Plot)\n\nindx <- which(y == 1000)\nfor (i in 1:length(indx)) print(out[[indx[i]]]$Plot)\n\nindx <- which(y > 1e-3 & y < 1000)\nfor (i in 1:length(indx)) print(out[[indx[i]]]$Plot)\n\ndev.off()\n\n#-------------------------------------------------------------------------------------------------#\n#-----Apply logic for pathway effect and trend for the Fits data frame\n#-------------------------------------------------------------------------------------------------#\n\nFits <- as.data.table(Fits)\n\nFits[MaxmMd >= Scrit & cor_pvalue <= 0.05, type := 1] #maxmMd over critical value and trend\nFits[MaxmMd >= Scrit & cor_pvalue >= 0.05, type := 2] #maxmMd over critical value but no trend\nFits[MaxmMd <= Scrit & cor_pvalue <= 0.05, type := 3] #maxmMd below critical value and trend\nFits[MaxmMd <= Scrit & cor_pvalue >= 0.05, type := 4] #maxmMd below critical value but no trend\n\n#correct for small and infinite BMDs\nFits[BMD >= 150, BMD := 1e03]\nFits[BMD <= 1e-03, BMD := 1e-04]\n\n#make table and table Grob\nbmd_table <- data.table(\"No Trend\" = c(48, 308), \"Trend\" = c(3, 407))\nrow.names(bmd_table) <- c(\"maxmMd < Critical Value\", \"maxmMd > Critical Value\")\n\ncols <- matrix(c(\"#92c5de\", \"#f4a582\", \"#313695\", \"#a50026\"), nrow(bmd_table), ncol(bmd_table))\ntt <- ttheme_minimal(\n  core=list(fg_params = list(col = cols),\n            bg_params = list(col=NA)),\n  rowhead=list(bg_params = list(col=NA), fg_params = list(fontface = \"bold\")),\n  colhead=list(bg_params = list(col=NA)))\n\nt <- tableGrob(bmd_table, theme = tt)\n\n#-------------------------------------------------------------------------------------------------#\n#-----Figure 9\n#-------------------------------------------------------------------------------------------------#\n\np3 <- ggplot(data = Fits, aes(x = MaxmMd, y = BMD)) +\n  geom_smooth(color = \"black\", alpha = 0.25) + #change acccordingly\n  geom_point(data = Fits[type != 3], aes(color = factor(type), shape = factor(type)), size = 3, alpha = 0.5) +\n  geom_point(data = Fits[type == 3], aes(color = factor(type), shape = factor(type)), size = 3, alpha = 0.5) +\n  theme_few() +\n  annotation_custom(grob = t, xmin = log10(15), xmax = log10(55), ymin = 4.25, ymax = 5.25) +\n  scale_y_log10() +\n  scale_x_log10() +\n  annotation_logticks(sides = \"l\", short = unit(0, \"mm\"), mid = unit(0, \"mm\")) +\n  annotation_logticks(sides = \"b\") +\n  scale_color_manual(values = c(\"#a50026\", \"#f4a582\", \"#313695\", \"#92c5de\")) +\n  scale_shape_manual(values = c(16, 17, 18, 15)) +\n  xlab(\"maxmMd\") +\n  ylab(\"BMD (uM)\") +\n  guides(color = FALSE, shape = FALSE) +\n  theme(axis.title.x = element_text(size = 16),\n        axis.title.y = element_text(size = 16))\n\n\np3\n\ntiff(\"Fig9_maxmMd_by_BMD.tiff\", width = 12, height = 8, units = \"in\", res = 300)\np3\ndev.off()\n\npdf(\"Fig9_maxmMd_by_BMD.pdf\", width = 12, height = 8)\np3\ndev.off()\n\n",
    "created" : 1508877481312.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1726004044",
    "id" : "14CF031E",
    "lastKnownWriteTime" : 1508877814,
    "last_content_update" : 1508877827512,
    "path" : "L:/Lab/NCCT_ToxCast/Derik Haggard/OECD Analysis/R Scripts for Pub/Scripts/Fig9_mMd_HillFitting.R",
    "project_path" : "Scripts/Fig9_mMd_HillFitting.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}